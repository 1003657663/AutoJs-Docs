{
  "source": "..\\api\\images.md",
  "modules": [
    {
      "textRaw": "colors",
      "name": "colors",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>在Auto.js有两种方式表示一个颜色。</p>\n<p>一种是使用一个字符串&quot;#AARRGGBB&quot;或&quot;#RRGGBB&quot;，其中 AA 是Alpha通道(透明度)的值，RR 是R通道(红色)的值，GG 是G通道(绿色)的值，BB是B通道(蓝色)的值。例如&quot;#ffffff&quot;表示白色, &quot;#7F000000&quot;表示半透明的黑色。</p>\n<p>另一种是使用一个16进制的&quot;32位整数&quot; 0xAARRGGBB 来表示一个颜色，例如 <code>0xFF112233</code>表示颜色&quot;#112233&quot;, <code>0x11223344</code>表示颜色&quot;#11223344&quot;。</p>\n<p>可以通过<code>colors.toString()</code>把颜色整数转换为字符串，通过<code>colors.parseColor()</code>把颜色字符串解析为颜色整数。</p>\n",
      "methods": [
        {
          "textRaw": "colors.toString(color)",
          "type": "method",
          "name": "toString",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color` {number} 整数RGB颜色值 ",
                  "name": "color",
                  "type": "number",
                  "desc": "整数RGB颜色值"
                },
                {
                  "textRaw": "返回 {string} ",
                  "name": "返回",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色值的字符串，格式为 &quot;#AARRGGBB&quot;。</p>\n"
        },
        {
          "textRaw": "colors.red(color)",
          "type": "method",
          "name": "red",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color` {number} | {string} 颜色值 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 颜色值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色color的R通道的值，范围0~255.</p>\n"
        },
        {
          "textRaw": "colors.green(color)",
          "type": "method",
          "name": "green",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color` {number} | {string} 颜色值 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 颜色值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色color的G通道的值，范围0~255.</p>\n"
        },
        {
          "textRaw": "colors.blue(color)",
          "type": "method",
          "name": "blue",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color` {number} | {string} 颜色值 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 颜色值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色color的B通道的值，范围0~255.</p>\n"
        },
        {
          "textRaw": "colors.alpha(color)",
          "type": "method",
          "name": "alpha",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color` {number} | {string} 颜色值 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 颜色值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色color的Alpha通道的值，范围0~255.</p>\n"
        },
        {
          "textRaw": "colors.rgb(red, green, blue)",
          "type": "method",
          "name": "rgb",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "red {number} 颜色的R通道的值 ",
                  "name": "red",
                  "type": "number",
                  "desc": "颜色的R通道的值"
                },
                {
                  "textRaw": "blue {number} 颜色的G通道的值 ",
                  "name": "blue",
                  "type": "number",
                  "desc": "颜色的G通道的值"
                },
                {
                  "textRaw": "green {number} 颜色的B通道的值 ",
                  "name": "green",
                  "type": "number",
                  "desc": "颜色的B通道的值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "red"
                },
                {
                  "name": "green"
                },
                {
                  "name": "blue"
                }
              ]
            }
          ],
          "desc": "<p>返回这些颜色通道构成的整数颜色值。Alpha通道将是255（不透明）。</p>\n"
        },
        {
          "textRaw": "colors.argb(alpha, red, green, blue)",
          "type": "method",
          "name": "argb",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`alpha` {number} 颜色的Alpha通道的值 ",
                  "name": "alpha",
                  "type": "number",
                  "desc": "颜色的Alpha通道的值"
                },
                {
                  "textRaw": "`red` {number}  颜色的R通道的值 ",
                  "name": "red",
                  "type": "number",
                  "desc": "颜色的R通道的值"
                },
                {
                  "textRaw": "`green` {number} 颜色的G通道的值 ",
                  "name": "green",
                  "type": "number",
                  "desc": "颜色的G通道的值"
                },
                {
                  "textRaw": "`blue` {number} 颜色的B通道的值 ",
                  "name": "blue",
                  "type": "number",
                  "desc": "颜色的B通道的值"
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "alpha"
                },
                {
                  "name": "red"
                },
                {
                  "name": "green"
                },
                {
                  "name": "blue"
                }
              ]
            }
          ],
          "desc": "<p>返回这些颜色通道构成的整数颜色值。</p>\n"
        },
        {
          "textRaw": "colors.parseColor(colorStr)",
          "type": "method",
          "name": "parseColor",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`colorStr` {string} 表示颜色的字符串，例如\"#112233\" ",
                  "name": "colorStr",
                  "type": "string",
                  "desc": "表示颜色的字符串，例如\"#112233\""
                },
                {
                  "textRaw": "返回 {number} ",
                  "name": "返回",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "colorStr"
                }
              ]
            }
          ],
          "desc": "<p>返回颜色的整数值。</p>\n"
        },
        {
          "textRaw": "colors.isSimilar(color2, color2[, threshold, algorithm])",
          "type": "method",
          "name": "isSimilar",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color1` {number} | {string} 颜色值1 ",
                  "name": "color1",
                  "type": "number",
                  "desc": "| {string} 颜色值1"
                },
                {
                  "textRaw": "`color1` {number} | {string} 颜色值2 ",
                  "name": "color1",
                  "type": "number",
                  "desc": "| {string} 颜色值2"
                },
                {
                  "textRaw": "`threshold` {number} 颜色相似度临界值，默认为4。取值范围为0~255。这个值越大表示允许的相似程度越小，如果这个值为0，则两个颜色相等时该函数才会返回true。 ",
                  "name": "threshold",
                  "type": "number",
                  "desc": "颜色相似度临界值，默认为4。取值范围为0~255。这个值越大表示允许的相似程度越小，如果这个值为0，则两个颜色相等时该函数才会返回true。",
                  "optional": true
                },
                {
                  "textRaw": "`algorithm` {string} 颜色匹配算法，默认为\"diff\", 包括: ",
                  "options": [
                    {
                      "textRaw": "\"diff\": 差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。 ",
                      "name": "diff",
                      "desc": "差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。"
                    },
                    {
                      "textRaw": "\"rgb\": rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。 ",
                      "name": "rgb",
                      "desc": "rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。"
                    },
                    {
                      "textRaw": "\"rgb+\": 加权rgb欧拉距离匹配([LAB Delta E](https://en.wikipedia.org/wiki/Color_difference))。 ",
                      "name": "rgb+",
                      "desc": "加权rgb欧拉距离匹配([LAB Delta E](https://en.wikipedia.org/wiki/Color_difference))。"
                    },
                    {
                      "textRaw": "\"hs\": hs欧拉距离匹配。hs为HSV空间的色调值。 ",
                      "name": "hs",
                      "desc": "hs欧拉距离匹配。hs为HSV空间的色调值。"
                    }
                  ],
                  "name": "algorithm",
                  "type": "string",
                  "desc": "颜色匹配算法，默认为\"diff\", 包括:",
                  "optional": true
                },
                {
                  "textRaw": "返回 {Boolean} ",
                  "name": "返回",
                  "type": "Boolean"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color2"
                },
                {
                  "name": "color2"
                },
                {
                  "name": "threshold",
                  "optional": true
                },
                {
                  "name": "algorithm",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>返回两个颜色是否相似。</p>\n"
        },
        {
          "textRaw": "colors.equals(color1, color2)",
          "type": "method",
          "name": "equals",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`color1` {number} | {string} 颜色值1 ",
                  "name": "color1",
                  "type": "number",
                  "desc": "| {string} 颜色值1"
                },
                {
                  "textRaw": "`color1` {number} | {string} 颜色值2 ",
                  "name": "color1",
                  "type": "number",
                  "desc": "| {string} 颜色值2"
                },
                {
                  "textRaw": "返回 {Boolean} ",
                  "name": "返回",
                  "type": "Boolean"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "color1"
                },
                {
                  "name": "color2"
                }
              ]
            }
          ],
          "desc": "<p>返回两个颜色是否相等。<em>*注意该函数会忽略Alpha通道的值进行比较</em>。</p>\n<pre><code>log(colors.equals(&quot;#112233&quot;, &quot;#112234&quot;));\nlog(colors.equals(0xFF112233, 0xFF223344));\n</code></pre>"
        }
      ],
      "type": "module",
      "displayName": "colors"
    },
    {
      "textRaw": "Images",
      "name": "images",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>images模块提供了一些手机设备中常见的图片处理函数，包括截图、读写图片、图片剪裁、找色、找图等。</p>\n",
      "methods": [
        {
          "textRaw": "images.requestScreenCapture([landscape])",
          "type": "method",
          "name": "requestScreenCapture",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`landscape` {boolean} 布尔值， 表示将要执行的截屏是否为横屏。如果landscape为false, 则表示竖屏截图; true为横屏截图。 ",
                  "name": "landscape",
                  "type": "boolean",
                  "desc": "布尔值， 表示将要执行的截屏是否为横屏。如果landscape为false, 则表示竖屏截图; true为横屏截图。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "landscape",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>向系统申请屏幕截图权限，返回是否请求成功。</p>\n<p>第一次使用该函数会弹出截图权限请求，建议选择“总是允许”。</p>\n<p>这个函数只是申请截图权限，并不会真正执行截图，真正的截图函数是<code>captureScreen()</code>。</p>\n<p>该函数在截图脚本中只需执行一次，而无需每次调用<code>captureScreen()</code>都调用一次。</p>\n<p><strong>如果不指定landscape值，则截图方向由当前设备屏幕方向决定</strong>，因此务必注意执行该函数时的屏幕方向。</p>\n<p>建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象。  </p>\n<p>示例:</p>\n<pre><code>//请求截图\nif(!requestScreenCapture()){\n    toast(&quot;请求截图失败&quot;);\n    exit();\n}\n//连续截图10张图片(间隔1秒)并保存到存储卡目录\nfor(var i = 0; i &lt; 10; i++){\n    captureScreen(&quot;/sdcard/screencapture&quot; + i + &quot;.png&quot;);\n    sleep(1000);\n}\n</code></pre><p>该函数也可以作为全局函数使用。</p>\n"
        },
        {
          "textRaw": "images.captureScreen()",
          "type": "method",
          "name": "captureScreen",
          "desc": "<p>截取当前屏幕并返回一个Image对象。</p>\n<p>没有截图权限时执行该函数会抛出SecurityException。</p>\n<p>该函数不会返回null，两次调用可能返回相同的Image对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是16ms）连续调用则会返回同一张截图。</p>\n<p>截图需要转换为Bitmap格式，从而该函数执行需要一定的时间(0~20ms)。</p>\n<p>另外在requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用captureScreen()，会等待一定时间后(一般为几百ms)才返回截图。</p>\n<p>例子:</p>\n<pre><code>//请求横屏截图\nrequestScreenCapture(true);\n//截图\nvar img = captureScreen();\n//获取在点(100, 100)的颜色值\nvar color = images.pixel(img, 100, 100);\n//显示该颜色值\ntoast(colors.toString(color));\n</code></pre><p>该函数也可以作为全局函数使用。</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "images.captureScreen(path)",
          "type": "method",
          "name": "captureScreen",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 截图保存路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "截图保存路径"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>截取当前屏幕并以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。</p>\n<p>该函数不会返回任何值。该函数也可以作为全局函数使用。</p>\n"
        },
        {
          "textRaw": "images.pixel(image, x, y)",
          "type": "method",
          "name": "pixel",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {Image} 图片 ",
                  "name": "image",
                  "type": "Image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`x` {number} 要获取的像素的横坐标。 ",
                  "name": "x",
                  "type": "number",
                  "desc": "要获取的像素的横坐标。"
                },
                {
                  "textRaw": "`y` {number} 要获取的像素的纵坐标。 ",
                  "name": "y",
                  "type": "number",
                  "desc": "要获取的像素的纵坐标。"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "image"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>返回图片image在点(x, y)处的像素的ARGB值。  </p>\n<p>该值的格式为0xAARRGGBB，是一个&quot;32位整数&quot;(虽然JavaScript中并不区分整数类型和其他数值类型)。</p>\n<p>坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。</p>\n"
        },
        {
          "textRaw": "images.save(image, path[, format = \"png\", quality = 100])",
          "type": "method",
          "name": "save",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {image} 图片 ",
                  "name": "image",
                  "type": "image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                },
                {
                  "textRaw": "`format` {string} 图片格式，可选的值为: ",
                  "options": [
                    {
                      "textRaw": "`png` ",
                      "name": "png"
                    },
                    {
                      "textRaw": "`jpeg`/`jpg` ",
                      "name": "jpeg",
                      "desc": "/`jpg`"
                    },
                    {
                      "textRaw": "`webp` ",
                      "name": "webp"
                    }
                  ],
                  "name": "format",
                  "type": "string",
                  "desc": "图片格式，可选的值为:",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "textRaw": "`quality` {number} 图片质量，为0~100的整数值 ",
                  "name": "quality",
                  "type": "number",
                  "desc": "图片质量，为0~100的整数值",
                  "optional": true,
                  "default": " 100"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "image"
                },
                {
                  "name": "path"
                },
                {
                  "name": "format ",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "name": "quality ",
                  "optional": true,
                  "default": " 100"
                }
              ]
            }
          ],
          "desc": "<p>把图片image以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。</p>\n<pre><code>//把图片压缩为原来的一半质量并保存\nvar img = images.read(&quot;/sdcard/1.png&quot;);\nimages.save(img, &quot;/sdcard/1.jpg&quot;, &quot;jpg&quot;, 50);\napp.viewFile(&quot;/sdcard/1.jpg&quot;);\n</code></pre>"
        },
        {
          "textRaw": "images.read(path)",
          "type": "method",
          "name": "read",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 图片路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "图片路径"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>读取在路径path的图片文件并返回一个Image对象。如果文件不存在或者文件无法解码则返回null。</p>\n"
        },
        {
          "textRaw": "images.load(url)",
          "type": "method",
          "name": "load",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 图片URL地址 ",
                  "name": "url",
                  "type": "string",
                  "desc": "图片URL地址"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                }
              ]
            }
          ],
          "desc": "<p>加载在地址URL的网络图片并返回一个Image对象。如果地址不存在或者图片无法解码则返回null。</p>\n"
        },
        {
          "textRaw": "images.fromBase64(base64)",
          "type": "method",
          "name": "fromBase64",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`base64` {string} 图片的Base64数据 ",
                  "name": "base64",
                  "type": "string",
                  "desc": "图片的Base64数据"
                },
                {
                  "textRaw": "返回 {Image} ",
                  "name": "返回",
                  "type": "Image"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "base64"
                }
              ]
            }
          ],
          "desc": "<p>解码Base64数据并返回解码后的图片Image对象。如果base64无法解码则返回<code>null</code>。</p>\n"
        },
        {
          "textRaw": "images.toBase64(img[, format = \"png\", quality = 100])",
          "type": "method",
          "name": "toBase64",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {image} 图片 ",
                  "name": "image",
                  "type": "image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`format` {string} 图片格式，可选的值为: ",
                  "options": [
                    {
                      "textRaw": "`png` ",
                      "name": "png"
                    },
                    {
                      "textRaw": "`jpeg`/`jpg` ",
                      "name": "jpeg",
                      "desc": "/`jpg`"
                    },
                    {
                      "textRaw": "`webp` ",
                      "name": "webp"
                    }
                  ],
                  "name": "format",
                  "type": "string",
                  "desc": "图片格式，可选的值为:",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "textRaw": "`quality` {number} 图片质量，为0~100的整数值 ",
                  "name": "quality",
                  "type": "number",
                  "desc": "图片质量，为0~100的整数值",
                  "optional": true,
                  "default": " 100"
                },
                {
                  "textRaw": "返回 {string} ",
                  "name": "返回",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "format ",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "name": "quality ",
                  "optional": true,
                  "default": " 100"
                }
              ]
            }
          ],
          "desc": "<p>把图片编码为base64数据并返回。</p>\n"
        },
        {
          "textRaw": "images.fromBytes(bytes)",
          "type": "method",
          "name": "fromBytes",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`bytes` {byte[]} 字节数组 ",
                  "name": "bytes",
                  "type": "byte[]",
                  "desc": "字节数组"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "bytes"
                }
              ]
            }
          ],
          "desc": "<p>解码字节数组bytes并返回解码后的图片Image对象。如果bytes无法解码则返回<code>null</code>。</p>\n"
        },
        {
          "textRaw": "images.toBytes(img[, format = \"png\", quality = 100])",
          "type": "method",
          "name": "toBytes",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {image} 图片 ",
                  "name": "image",
                  "type": "image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`format` {string} 图片格式，可选的值为: ",
                  "options": [
                    {
                      "textRaw": "`png` ",
                      "name": "png"
                    },
                    {
                      "textRaw": "`jpeg`/`jpg` ",
                      "name": "jpeg",
                      "desc": "/`jpg`"
                    },
                    {
                      "textRaw": "`webp` ",
                      "name": "webp"
                    }
                  ],
                  "name": "format",
                  "type": "string",
                  "desc": "图片格式，可选的值为:",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "textRaw": "`quality` {number} 图片质量，为0~100的整数值 ",
                  "name": "quality",
                  "type": "number",
                  "desc": "图片质量，为0~100的整数值",
                  "optional": true,
                  "default": " 100"
                },
                {
                  "textRaw": "返回 {byte[]} ",
                  "name": "返回",
                  "type": "byte[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "format ",
                  "optional": true,
                  "default": " \"png\""
                },
                {
                  "name": "quality ",
                  "optional": true,
                  "default": " 100"
                }
              ]
            }
          ],
          "desc": "<p>把图片编码为字节数组并返回。</p>\n"
        },
        {
          "textRaw": "images.clip(img, x, y, w, h)",
          "type": "method",
          "name": "clip",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`img` {Image} 图片 ",
                  "name": "img",
                  "type": "Image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`x` {number} 剪切区域的左上角横坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "剪切区域的左上角横坐标"
                },
                {
                  "textRaw": "`y` {number} 剪切区域的左上角纵坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "剪切区域的左上角纵坐标"
                },
                {
                  "textRaw": "`w` {number} 剪切区域的宽度 ",
                  "name": "w",
                  "type": "number",
                  "desc": "剪切区域的宽度"
                },
                {
                  "textRaw": "`h` {number} 剪切区域的高度 ",
                  "name": "h",
                  "type": "number",
                  "desc": "剪切区域的高度"
                },
                {
                  "textRaw": "返回 {Image} ",
                  "name": "返回",
                  "type": "Image"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "w"
                },
                {
                  "name": "h"
                }
              ]
            }
          ],
          "desc": "<p>从图片img的位置(x, y)处剪切大小为w * h的区域，并返回该剪切区域的新图片。</p>\n<pre><code>var src = images.read(&quot;/sdcard/1.png&quot;);\nvar clip = images.clip(src, 100, 100, 400, 400);\nimages.save(clip, &quot;/sdcard/clip.png&quot;);\n</code></pre>"
        },
        {
          "textRaw": "images.findColor(image, color, options)",
          "type": "method",
          "name": "findColor",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {Image} 图片 ",
                  "name": "image",
                  "type": "Image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`color` {number} | {string} 要寻找的颜色的RGB值。如果是一个整数，则以0xRRGGBB的形式代表RGB值（A通道会被忽略）；如果是字符串，则以\"#RRGGBB\"代表其RGB值。 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 要寻找的颜色的RGB值。如果是一个整数，则以0xRRGGBB的形式代表RGB值（A通道会被忽略）；如果是字符串，则以\"#RRGGBB\"代表其RGB值。"
                },
                {
                  "textRaw": "`options` {Object} 选项 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "选项"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "image"
                },
                {
                  "name": "color"
                },
                {
                  "name": "options"
                }
              ]
            }
          ],
          "desc": "<p>在图片中寻找颜色color。找到时返回找到的点Point，找不到时返回null。</p>\n<p>选项包括：</p>\n<ul>\n<li><code>region</code> {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定region选项，则找色区域为整张图片。</li>\n<li><code>threshold</code> {number} 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</li>\n</ul>\n<p>该函数也可以作为全局函数使用。</p>\n<p>一个循环找色的例子如下：</p>\n<pre><code>requestScreenCapture();\n\n//循环找色，找到红色(#ff0000)时停止并报告坐标\nwhile(true){\n    var img = captureScreen();\n    var point = findColor(img, &quot;#ff0000&quot;);\n    if(point){\n        toast(&quot;找到红色，坐标为(&quot; + point.x + &quot;, &quot; + point.y + &quot;)&quot;);\n    }\n}\n</code></pre><p>一个区域找色的例子如下：</p>\n<pre><code>//读取本地图片/sdcard/1.png\nvar img = images.read(&quot;/sdcard/1.png&quot;);\n//判断图片是否加载成功\nif(!img){\n    toast(&quot;没有该图片&quot;);\n    exit();\n}\n//在该图片中找色，指定找色区域为在位置(400, 500)的宽为300长为200的区域，指定找色临界值为4\nvar point = findColor(img, &quot;#00ff00&quot;, {\n     region: [400, 500, 300, 200],\n     threshold: 4\n });\nif(point){\n    toast(&quot;找到啦:&quot; + point);\n}else{\n    toast(&quot;没找到&quot;);\n}\n</code></pre>"
        },
        {
          "textRaw": "images.findColorInRegion(img, color, x, y[, width, height, threshold])",
          "type": "method",
          "name": "findColorInRegion",
          "desc": "<p>区域找色的简便方法。</p>\n<p>相当于</p>\n<pre><code>images.findColor(img, color, {\n     region: [x, y, width, height],\n     threshold: threshold\n});\n</code></pre><p>该函数也可以作为全局函数使用。</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "color"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "width",
                  "optional": true
                },
                {
                  "name": "height",
                  "optional": true
                },
                {
                  "name": "threshold",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "images.findColorEquals(img, color[, x, y, width, height])",
          "type": "method",
          "name": "findColorEquals",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`img` {Image} 图片 ",
                  "name": "img",
                  "type": "Image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`color` {number} | {string} 要寻找的颜色 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 要寻找的颜色"
                },
                {
                  "textRaw": "`x` {number} 找色区域的左上角横坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "找色区域的左上角横坐标",
                  "optional": true
                },
                {
                  "textRaw": "`y` {number} 找色区域的左上角纵坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "找色区域的左上角纵坐标",
                  "optional": true
                },
                {
                  "textRaw": "`width` {number} 找色区域的宽度 ",
                  "name": "width",
                  "type": "number",
                  "desc": "找色区域的宽度",
                  "optional": true
                },
                {
                  "textRaw": "`height` {number} 找色区域的高度 ",
                  "name": "height",
                  "type": "number",
                  "desc": "找色区域的高度",
                  "optional": true
                },
                {
                  "textRaw": "返回 {Point} ",
                  "name": "返回",
                  "type": "Point"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "color"
                },
                {
                  "name": "x",
                  "optional": true
                },
                {
                  "name": "y",
                  "optional": true
                },
                {
                  "name": "width",
                  "optional": true
                },
                {
                  "name": "height",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>在图片img指定区域中找到颜色和color完全相等的某个点，并返回该点的左边；如果没有找到，则返回<code>null</code>。</p>\n<p>找色区域通过<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>指定，如果不指定找色区域，则在整张图片中寻找。</p>\n<p>该函数也可以作为全局函数使用。</p>\n<p>示例：\n(通过找QQ红点的颜色来判断是否有未读消息)</p>\n<pre><code>requestScreenCapture();\nlaunchApp(&quot;QQ&quot;);\nsleep(1200);\nvar p = findColorEquals(captureScreen(), &quot;#f64d30&quot;);\nif(p){\n    toast(&quot;有未读消息&quot;);\n}else{\n    toast(&quot;没有未读消息&quot;);\n}\n</code></pre>"
        },
        {
          "textRaw": "images.findMultiColors(img, firstColor, colors[, options])",
          "type": "method",
          "name": "findMultiColors",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`img` {Image} 要找色的图片 ",
                  "name": "img",
                  "type": "Image",
                  "desc": "要找色的图片"
                },
                {
                  "textRaw": "`firstColor` {number} | {string} 第一个点的颜色 ",
                  "name": "firstColor",
                  "type": "number",
                  "desc": "| {string} 第一个点的颜色"
                },
                {
                  "textRaw": "`colors` {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color] ",
                  "name": "colors",
                  "type": "Array",
                  "desc": "表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]"
                },
                {
                  "textRaw": "`options` {Object} 选项，包括： ",
                  "options": [
                    {
                      "textRaw": "`region` {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定region选项，则找色区域为整张图片。 ",
                      "name": "region",
                      "type": "Array",
                      "desc": "找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定region选项，则找色区域为整张图片。"
                    },
                    {
                      "textRaw": "`threshold` {number} 找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255. ",
                      "name": "threshold",
                      "type": "number",
                      "desc": "找色时颜色相似度的临界值，范围为0~255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "desc": "选项，包括：",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "firstColor"
                },
                {
                  "name": "colors"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>多点找色，类似于按键精灵的多点找色，其过程如下：</p>\n<ol>\n<li>在图片img中找到颜色firstColor的位置(x0, y0)</li>\n<li>对于数组colors的每个元素[x, y, color]，检查图片img在位置(x + x0, y + y0)上的像素是否是颜色color，是的话返回(x0, y0)，否则继续寻找firstColor的位置，重新执行第1步</li>\n<li>整张图片都找不到时返回<code>null</code></li>\n</ol>\n<p>例如，对于代码<code>images.findMultiColors(img, &quot;#123456&quot;, [[10, 20, &quot;#ffffff&quot;], [30, 40, &quot;#000000&quot;]])</code>，假设图片在(100, 200)的位置的颜色为#123456, 这时如果(110, 220)的位置的颜色为#fffff且(130, 240)的位置的颜色为#000000，则函数返回点(100, 200)。</p>\n<p>如果要指定找色区域，则在options中指定，例如:</p>\n<pre><code>var p = images.findMultiColors(img, &quot;#123456&quot;, [[10, 20, &quot;#ffffff&quot;], [30, 40, &quot;#000000&quot;]], {\n    region: [0, 960, 1080, 960]\n});\n</code></pre>"
        },
        {
          "textRaw": "images.detectsColor(image, color, x, y[, threshold = 16, algorithm = \"diff\"])",
          "type": "method",
          "name": "detectsColor",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`image` {Image} 图片 ",
                  "name": "image",
                  "type": "Image",
                  "desc": "图片"
                },
                {
                  "textRaw": "`color` {number} | {string} 要检测的颜色 ",
                  "name": "color",
                  "type": "number",
                  "desc": "| {string} 要检测的颜色"
                },
                {
                  "textRaw": "`x` {number} 要检测的位置横坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "要检测的位置横坐标"
                },
                {
                  "textRaw": "`y` {number} 要检测的位置纵坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "要检测的位置纵坐标"
                },
                {
                  "textRaw": "`threshold` {number} 颜色相似度临界值，默认为16。取值范围为0~255。 ",
                  "name": "threshold",
                  "type": "number",
                  "desc": "颜色相似度临界值，默认为16。取值范围为0~255。",
                  "optional": true,
                  "default": " 16"
                },
                {
                  "textRaw": "`algorithm` {string} 颜色匹配算法，包括: ",
                  "options": [
                    {
                      "textRaw": "\"equal\": 相等匹配，只有与给定颜色color完全相等时才匹配。 ",
                      "name": "equal",
                      "desc": "相等匹配，只有与给定颜色color完全相等时才匹配。"
                    },
                    {
                      "textRaw": "\"diff\": 差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。 ",
                      "name": "diff",
                      "desc": "差值匹配。与给定颜色的R、G、B差的绝对值之和小于threshold时匹配。"
                    },
                    {
                      "textRaw": "\"rgb\": rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。 ",
                      "name": "rgb",
                      "desc": "rgb欧拉距离相似度。与给定颜色color的rgb欧拉距离小于等于threshold时匹配。"
                    },
                    {
                      "textRaw": "\"rgb+\": 加权rgb欧拉距离匹配([LAB Delta E](https://en.wikipedia.org/wiki/Color_difference))。 ",
                      "name": "rgb+",
                      "desc": "加权rgb欧拉距离匹配([LAB Delta E](https://en.wikipedia.org/wiki/Color_difference))。"
                    },
                    {
                      "textRaw": "\"hs\": hs欧拉距离匹配。hs为HSV空间的色调值。 ",
                      "name": "hs",
                      "desc": "hs欧拉距离匹配。hs为HSV空间的色调值。"
                    }
                  ],
                  "name": "algorithm",
                  "type": "string",
                  "desc": "颜色匹配算法，包括:",
                  "optional": true,
                  "default": " \"diff\""
                }
              ]
            },
            {
              "params": [
                {
                  "name": "image"
                },
                {
                  "name": "color"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "threshold ",
                  "optional": true,
                  "default": " 16"
                },
                {
                  "name": "algorithm ",
                  "optional": true,
                  "default": " \"diff\""
                }
              ]
            }
          ],
          "desc": "<p>返回图片image在位置(x, y)处是否匹配到颜色color。用于检测图片中某个位置是否是特定颜色。</p>\n<p>一个判断微博客户端的某个微博是否被点赞过的例子：</p>\n<pre><code>requestScreenCapture();\n//找到点赞控件\nvar like = id(&quot;ly_feed_like_icon&quot;).findOne();\n//获取该控件中点坐标\nvar x = like.bounds().centerX();\nvar y = like.bounds().centerY();\n//截图\nvar img = captureScreen();\n//判断在该坐标的颜色是否为橙红色\nif(images.detectsColor(img, &quot;#fed9a8&quot;, x, y)){\n    //是的话则已经是点赞过的了，不做任何动作\n}else{\n    //否则点击点赞按钮\n    like.click();\n}\n</code></pre>"
        },
        {
          "textRaw": "images.findImage(img, template[, options])",
          "type": "method",
          "name": "findImage",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`img` {Image} 大图片 ",
                  "name": "img",
                  "type": "Image",
                  "desc": "大图片"
                },
                {
                  "textRaw": "`template` {Image} 小图片（模板） ",
                  "name": "template",
                  "type": "Image",
                  "desc": "小图片（模板）"
                },
                {
                  "textRaw": "`options` {Object} 找图选项 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "找图选项",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "template"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>找图。在大图片img中查找小图片template的位置（模块匹配），找到时返回位置坐标(Point)，找不到时返回null。</p>\n<p>选项包括：</p>\n<ul>\n<li><code>threshold</code> {number} 图片相似度。取值范围为0~1的浮点数。默认值为0.9。</li>\n<li><code>region</code> {Array} 找图区域。参见findColor函数关于region的说明。</li>\n<li><code>level</code> {number} <strong>一般而言不必修改此参数</strong>。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</li>\n</ul>\n<p>该函数也可以作为全局函数使用。</p>\n<p>一个最简单的找图例子如下：</p>\n<pre><code>var img = images.read(&quot;/sdcard/大图.png&quot;);\nvar templ = images.read(&quot;/sdcard/小图.png&quot;);\nvar p = findImage(img, templ);\nif(p){\n    toast(&quot;找到啦:&quot; + p);\n}else{\n    toast(&quot;没找到&quot;);\n}\n</code></pre><p>稍微复杂点的区域找图例子如下：</p>\n<pre><code>auto();\nrequestScreenCapture();\nvar wx = images.read(&quot;/sdcard/微信图标.png&quot;);\n//返回桌面\nhome();\n//截图并找图\nvar p = findImage(captureScreen(), wx, {\n    region: [0, 50],\n    threshold: 0.8\n});\nif(p){\n    toast(&quot;在桌面找到了微信图标啦: &quot; + p);\n}else{\n    toast(&quot;在桌面没有找到微信图标&quot;);\n}\n</code></pre>"
        },
        {
          "textRaw": "images.findImageInRegion(img, template, x, y[, width, height, threshold])",
          "type": "method",
          "name": "findImageInRegion",
          "desc": "<p>区域找图的简便方法。相当于：</p>\n<pre><code>images.findImage(img, template, {\n    region: [x, y, width, height],\n    threshold: threshold\n})\n</code></pre><p>该函数也可以作为全局函数使用。</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "img"
                },
                {
                  "name": "template"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                },
                {
                  "name": "width",
                  "optional": true
                },
                {
                  "name": "height",
                  "optional": true
                },
                {
                  "name": "threshold",
                  "optional": true
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Images"
    },
    {
      "textRaw": "Image",
      "name": "image",
      "desc": "<p>表示一张图片，可以是截图的图片，或者本地读取的图片，或者从网络获取的图片。</p>\n",
      "methods": [
        {
          "textRaw": "Image.getWidth()",
          "type": "method",
          "name": "getWidth",
          "desc": "<p>返回以像素为单位图片宽度。</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "Image.getHeight()",
          "type": "method",
          "name": "getHeight",
          "desc": "<p>返回以像素为单位的图片高度。</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "Image.saveTo(path)",
          "type": "method",
          "name": "saveTo",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>把图片保存到路径path。（如果文件存在则覆盖）</p>\n"
        },
        {
          "textRaw": "Image.pixel(x, y)",
          "type": "method",
          "name": "pixel",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} 横坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "横坐标"
                },
                {
                  "textRaw": "`y` {number} 纵坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "纵坐标"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>返回图片image在点(x, y)处的像素的ARGB值。  </p>\n<p>该值的格式为0xAARRGGBB，是一个&quot;32位整数&quot;(虽然JavaScript中并不区分整数类型和其他数值类型)。</p>\n<p>坐标系以图片左上角为原点。以图片左侧边为y轴，上侧边为x轴。</p>\n"
        }
      ],
      "type": "module",
      "displayName": "Image"
    },
    {
      "textRaw": "Point",
      "name": "point",
      "desc": "<p>findColor, findImage返回的对象。表示一个点（坐标）。</p>\n",
      "properties": [
        {
          "textRaw": "Point.x",
          "name": "x",
          "desc": "<p>横坐标。</p>\n"
        },
        {
          "textRaw": "Point.y",
          "name": "y",
          "desc": "<p>纵坐标。</p>\n"
        }
      ],
      "type": "module",
      "displayName": "Point"
    }
  ]
}